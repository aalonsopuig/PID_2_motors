CCS PCM C Compiler, Version 3.242, 16465               27-may-06 23:18

               Filename: C:\Mis documentos\Programas\CCS-Progs\Motor2\motor2.lst

               ROM used: 1534 words (19%)
                         Largest free fragment is 2048
               RAM used: 46 (26%) at main() level
                         55 (31%) worst case
               Stack:    2 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1FF
0003:  NOP
.................... /* 
....................   Program: Motor v 2.0 
....................   by Alejandro Alonso-Puig 
....................   mundobot.com 
....................   May 2006 
....................  
....................   Motor speed control for CCS compiler. 
....................   Control a couple of DC motors with a PID algorithm. Could control the speed of both or each motor. 
....................   Use one PD controller per motor and an I controller to slave both motors. 
....................   Could receive and send information via RS232C. For more information go to www.mundobot.com 
....................  
.................... */ 
....................  
.................... /* 
.................... 	Hardware connections: 
....................  
.................... 	RA4	(IN)	Channel 1 from encoder of Right motor (counter register input) 
.................... 	RB0   (OUT)	Signal for change of direction of Right motor. Connect to E2 on Driver 
.................... 	RB1	(OUT)	Signal for change of direction of Left motor. Connect to E3 on Driver 
.................... 	RB2	(IN)	Channel 2 from encoder of Right motor 
.................... 	RB3	(IN)	Channel 1 from encoder of Left motor 
.................... 	RC0	(IN)	Channel 2 from encoder of Left motor (counter register input) 
.................... 	RC1   (OUT)	PWM Signal for Left motor. Connect to E4 on Driver 
.................... 	RC2   (OUT)	PWM Signal for Right motor. Connect to E1 on Driver 
.................... 	RC6			RS232 
.................... 	RC7			RS232 
.................... */ 
....................  
.................... #include <16F876.h> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES XT                    	//Crystal osc <= 4mhz 
.................... #FUSES PUT                   	//Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES BROWNOUT              	//Reset when brownout detected 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
....................  
.................... #use delay(clock=4000000) 
*
0035:  MOVLW  46
0036:  MOVWF  04
0037:  MOVF   00,W
0038:  BTFSC  03.2
0039:  GOTO   049
003A:  MOVLW  01
003B:  MOVWF  78
003C:  CLRF   77
003D:  DECFSZ 77,F
003E:  GOTO   03D
003F:  DECFSZ 78,F
0040:  GOTO   03C
0041:  MOVLW  4A
0042:  MOVWF  77
0043:  DECFSZ 77,F
0044:  GOTO   043
0045:  NOP
0046:  NOP
0047:  DECFSZ 00,F
0048:  GOTO   03A
0049:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=9) 
....................  
.................... signed long	SetPoint=0,					//Speed set for Motors (tics) 
*
020F:  BCF    03.5
0210:  CLRF   20
0211:  CLRF   21
.................... 				CVRight=0, CVLeft=0,		//Control Variables for the motors 
0212:  CLRF   22
0213:  CLRF   23
0214:  CLRF   24
0215:  CLRF   25
.................... 				CV,							//Control Variable for intermediate calculations 
.................... 				PVRight=0, PVLeft=0,		//Process variables (feedback value) 
0216:  CLRF   28
0217:  CLRF   29
0218:  CLRF   2A
0219:  CLRF   2B
.................... 				Kpro=50,					   //Proportional constant (tenths) 
021A:  MOVLW  32
021B:  MOVWF  2C
021C:  CLRF   2D
.................... 				Kint=1,						//Integral constant (tenths) 
021D:  MOVLW  01
021E:  MOVWF  2E
021F:  CLRF   2F
.................... 				Kdif=40,					   //Derivative constant (tenths) 
0220:  MOVLW  28
0221:  MOVWF  30
0222:  CLRF   31
.................... 				ErrRight=0, ErrLeft=0,		//Error values 
0223:  CLRF   32
0224:  CLRF   33
0225:  CLRF   34
0226:  CLRF   35
.................... 				LastErrRight, LastErrLeft, 	//Used for the Derivative part 
.................... 				ISum=0,						//Used for the Integral part 
0227:  CLRF   3A
0228:  CLRF   3B
.................... 				Bias=0,						//Allow steering 
0229:  CLRF   3C
022A:  CLRF   3D
.................... 				UnitDiv=50;					//Units division for internal calculations (This compiler doesn't use floating point) 
022B:  MOVLW  32
022C:  MOVWF  3E
022D:  CLRF   3F
.................... 											//It affects the Kpro, Kint and Kdif values, so if we want for example a derivative 
.................... 											//constant of 0,3, Kdif should be 0,3 x UnitDiv 
.................... char			Command, Value,				//For instructions received through serial port 
.................... 				Kpause=12;					//The period for reading the encoders (Milliseconds) 
022E:  MOVLW  0C
022F:  MOVWF  42
.................... int1 			DirRightFwd, DirLeftFwd,	//Used to identify the direction of the motors 
.................... 				SendFeedback=0;				//Used to identify if feedback values should be sent via RS232 
0230:  BCF    43.2
....................  
.................... char			n;							//General purpose variable 
....................  
....................  
....................  
.................... /////////// MOTOR CONTROL FUNCTIONS /////////// 
....................  
.................... void SetPWM(long CVR, long CVL) 
.................... //Sets the PWM values for both motors 
.................... { 
.................... 		long Module;							//Used for internal calculations 
....................  
....................  
.................... 		//Right MOTOR ----------------- 
....................  
.................... 		CVR=CVR/UnitDiv;						//Convert units 
*
009E:  MOVF   47,W
009F:  MOVWF  4D
00A0:  MOVF   46,W
00A1:  MOVWF  4C
00A2:  MOVF   3F,W
00A3:  MOVWF  4F
00A4:  MOVF   3E,W
00A5:  MOVWF  4E
00A6:  CALL   05F
00A7:  MOVF   78,W
00A8:  MOVWF  46
00A9:  MOVF   79,W
00AA:  MOVWF  47
....................  
.................... 		//Direction of rotation control 
.................... 		if (CVR>=0)	output_low(PIN_B0); 	//CW rotation 
00AB:  BSF    03.5
00AC:  BCF    06.0
00AD:  BCF    03.5
00AE:  BCF    06.0
.................... 		else 
.................... 		{ 
.................... 			output_high(PIN_B0); 			//CCW rotation 
.................... 			CVR=255+CVR;						//obtain the negative PWM wave 
.................... 		} 
....................  
.................... 		//Set the PWM counter 
.................... 		set_pwm1_duty (CVR); 
00AF:  MOVF   47,W
00B0:  MOVWF  79
00B1:  MOVF   46,W
00B2:  MOVWF  78
00B3:  RRF    79,F
00B4:  RRF    78,F
00B5:  RRF    79,F
00B6:  RRF    78,F
00B7:  RRF    79,F
00B8:  MOVF   78,W
00B9:  MOVWF  15
00BA:  RRF    79,F
00BB:  RRF    79,W
00BC:  ANDLW  30
00BD:  MOVWF  77
00BE:  MOVF   17,W
00BF:  ANDLW  CF
00C0:  IORWF  77,W
00C1:  MOVWF  17
....................  
....................  
.................... 		//Left MOTOR ----------------- 
....................  
.................... 		CVL=CVL/UnitDiv;						//Convert units 
00C2:  MOVF   49,W
00C3:  MOVWF  4D
00C4:  MOVF   48,W
00C5:  MOVWF  4C
00C6:  MOVF   3F,W
00C7:  MOVWF  4F
00C8:  MOVF   3E,W
00C9:  MOVWF  4E
00CA:  CALL   05F
00CB:  MOVF   78,W
00CC:  MOVWF  48
00CD:  MOVF   79,W
00CE:  MOVWF  49
....................  
.................... 		//Direction of rotation control 
.................... 		if (CVL>=0) output_low(PIN_B1); 	//CW rotation 
00CF:  BSF    03.5
00D0:  BCF    06.1
00D1:  BCF    03.5
00D2:  BCF    06.1
.................... 		else 
.................... 		{ 
.................... 			output_high(PIN_B1); 			//CCW rotation 
.................... 			CVL=255+CVL;						//obtain the negative PWM wave 
.................... 		} 
....................  
.................... 		//Set the PWM counter 
.................... 		set_pwm2_duty (CVL); 
00D3:  MOVF   49,W
00D4:  MOVWF  79
00D5:  MOVF   48,W
00D6:  MOVWF  78
00D7:  RRF    79,F
00D8:  RRF    78,F
00D9:  RRF    79,F
00DA:  RRF    78,F
00DB:  RRF    79,F
00DC:  MOVF   78,W
00DD:  MOVWF  1B
00DE:  RRF    79,F
00DF:  RRF    79,W
00E0:  ANDLW  30
00E1:  MOVWF  77
00E2:  MOVF   1D,W
00E3:  ANDLW  CF
00E4:  IORWF  77,W
00E5:  MOVWF  1D
.................... } 
00E6:  BCF    0A.3
00E7:  BCF    0A.4
00E8:  GOTO   49A (RETURN)
....................  
....................  
....................  
.................... /////////// BODY /////////// 
....................  
.................... void main() 
.................... { 
*
01FF:  CLRF   04
0200:  MOVLW  1F
0201:  ANDWF  03,F
0202:  MOVLW  19
0203:  BSF    03.5
0204:  MOVWF  19
0205:  MOVLW  66
0206:  MOVWF  18
0207:  MOVLW  D0
0208:  BCF    03.5
0209:  MOVWF  18
020A:  BSF    03.5
020B:  BSF    1F.0
020C:  BSF    1F.1
020D:  BSF    1F.2
020E:  BCF    1F.3
....................  
....................    //Configure I/O ports 
....................    set_tris_a (0b00010000);		  //configure port A (See comments at header) 
*
0233:  MOVLW  10
0234:  BSF    03.5
0235:  MOVWF  05
....................    set_tris_b (0b00001100);		  //configure port B (See comments at header) 
0236:  MOVLW  0C
0237:  MOVWF  06
....................    set_tris_c (0b10000001);		  //configure port C (See comments at header) 
*
0231:  MOVLW  FF
0232:  MOVWF  45
*
0238:  MOVLW  81
0239:  MOVWF  07
023A:  BCF    03.5
023B:  MOVWF  45
....................    output_a(0); 
023C:  BSF    03.5
023D:  CLRF   05
023E:  BCF    03.5
023F:  CLRF   05
....................    output_b(0); 
0240:  BSF    03.5
0241:  CLRF   06
0242:  BCF    03.5
0243:  CLRF   06
....................  
....................    //Send bootup message via serial port 
....................    printf("\r\nMotor v2.0\r\n"); 
0244:  CLRF   46
0245:  MOVF   46,W
0246:  CALL   004
0247:  INCF   46,F
0248:  MOVWF  77
0249:  MOVF   77,W
024A:  BTFSS  0C.4
024B:  GOTO   24A
024C:  MOVWF  19
024D:  MOVLW  0E
024E:  SUBWF  46,W
024F:  BTFSS  03.2
0250:  GOTO   245
....................    printf("May 2006. www.mundobot.com\r\n"); 
0251:  CLRF   46
0252:  MOVF   46,W
0253:  CALL   017
0254:  INCF   46,F
0255:  MOVWF  77
0256:  MOVF   77,W
0257:  BTFSS  0C.4
0258:  GOTO   257
0259:  MOVWF  19
025A:  MOVLW  0A
025B:  SUBWF  46,W
025C:  BTFSS  03.2
025D:  GOTO   252
025E:  MOVLW  03
025F:  MOVWF  47
0260:  MOVLW  77
0261:  BTFSS  0C.4
0262:  GOTO   261
0263:  MOVWF  19
0264:  DECFSZ 47,F
0265:  GOTO   260
0266:  MOVLW  0A
0267:  MOVWF  48
0268:  MOVF   48,W
0269:  CALL   017
026A:  INCF   48,F
026B:  MOVWF  77
026C:  MOVF   77,W
026D:  BTFSS  0C.4
026E:  GOTO   26D
026F:  MOVWF  19
0270:  MOVLW  19
0271:  SUBWF  48,W
0272:  BTFSS  03.2
0273:  GOTO   268
....................    printf("\r\n"); 
0274:  MOVLW  0D
0275:  BTFSS  0C.4
0276:  GOTO   275
0277:  MOVWF  19
0278:  MOVLW  0A
0279:  BTFSS  0C.4
027A:  GOTO   279
027B:  MOVWF  19
....................  
.................... 	//Configuration of counters for reading the encoders 
....................    setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_1);   //Right Motor encoder signal counter 
027C:  BSF    03.5
027D:  MOVF   01,W
027E:  ANDLW  C7
027F:  IORLW  28
0280:  MOVWF  01
....................    setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1);      //Left Motor encoder signal counter 
0281:  MOVLW  87
0282:  BCF    03.5
0283:  MOVWF  10
....................  
.................... 	//PWM generation configuration 
....................    setup_timer_2(T2_DIV_BY_1,99,1);             //10khz PWM signal 
0284:  MOVLW  00
0285:  MOVWF  78
0286:  IORLW  04
0287:  MOVWF  12
0288:  MOVLW  63
0289:  BSF    03.5
028A:  MOVWF  12
....................    setup_ccp1(CCP_PWM); 
028B:  BCF    03.5
028C:  BCF    45.2
028D:  MOVF   45,W
028E:  BSF    03.5
028F:  MOVWF  07
0290:  BCF    03.5
0291:  BCF    07.2
0292:  MOVLW  0C
0293:  MOVWF  17
....................    setup_ccp2(CCP_PWM); 
0294:  BCF    45.1
0295:  MOVF   45,W
0296:  BSF    03.5
0297:  MOVWF  07
0298:  BCF    03.5
0299:  BCF    07.1
029A:  MOVLW  0C
029B:  MOVWF  1D
....................    set_pwm1_duty (0); 
029C:  CLRF   15
....................    set_pwm2_duty (0); 
029D:  CLRF   1B
....................  
.................... 	while(1) {	/////MAIN LOOP///// 
....................  
....................      	// Check Speed from encoders 
....................       set_timer0(0);							//Start measurement period TMR0 
029E:  CLRF   01
....................       set_timer1(0);							//Start measurement period TMR1 
029F:  CLRF   0F
02A0:  CLRF   0E
.................... 		delay_ms(Kpause);						//Allow timer to read pulses from encoder 
02A1:  MOVF   42,W
02A2:  MOVWF  46
02A3:  CALL   035
.................... 		PVRight=get_timer0();				//Read feedback Right encoder 
02A4:  MOVF   01,W
02A5:  CLRF   7A
02A6:  MOVWF  28
02A7:  MOVF   7A,W
02A8:  MOVWF  29
.................... 		PVLeft=make8(get_timer1(),0);		//Read feedback Left encoder 
02A9:  MOVF   0F,W
02AA:  MOVWF  7A
02AB:  MOVF   0E,W
02AC:  MOVWF  77
02AD:  MOVF   0F,W
02AE:  SUBWF  7A,W
02AF:  BTFSS  03.2
02B0:  GOTO   2A9
02B1:  MOVF   77,W
02B2:  MOVWF  46
02B3:  MOVF   7A,W
02B4:  MOVWF  47
02B5:  MOVF   46,W
02B6:  CLRF   7A
02B7:  MOVWF  2A
02B8:  MOVF   7A,W
02B9:  MOVWF  2B
....................  
.................... 		// Check direction from quadrature encoders 
.................... 		for (n=0; n<255;n++) 
02BA:  CLRF   44
02BB:  INCFSZ 44,W
02BC:  GOTO   2BE
02BD:  GOTO   2DD
....................          if (!input(PIN_A4))   //Channel 1 from encoder of Right motor (RA4) 
02BE:  BSF    03.5
02BF:  BSF    05.4
02C0:  BCF    03.5
02C1:  BTFSC  05.4
02C2:  GOTO   2DB
.................... 		       for (n=0; n<255;n++) 
02C3:  CLRF   44
02C4:  INCFSZ 44,W
02C5:  GOTO   2C7
02C6:  GOTO   2DB
....................                   if (input(PIN_A4))    //Channel 1 from encoder of Right motor (RA4) 
02C7:  BSF    03.5
02C8:  BSF    05.4
02C9:  BCF    03.5
02CA:  BTFSS  05.4
02CB:  GOTO   2D9
.................... 		                if (input(PIN_B2)){                              //Channel 2 from encoder of Right motor (RB2) 
02CC:  BSF    03.5
02CD:  BSF    06.2
02CE:  BCF    03.5
02CF:  BTFSS  06.2
02D0:  GOTO   2D8
.................... 			               DirRightFwd=0; 
02D1:  BCF    43.0
.................... 			               PVRight=-PVRight;} 
02D2:  COMF   28,F
02D3:  COMF   29,F
02D4:  INCF   28,F
02D5:  BTFSC  03.2
02D6:  INCF   29,F
.................... 		                else	DirRightFwd=1; 
02D7:  GOTO   2D9
02D8:  BSF    43.0
02D9:  INCF   44,F
02DA:  GOTO   2C4
02DB:  INCF   44,F
02DC:  GOTO   2BB
....................  
.................... /*		for (n=0; n<255;n++) if (!input(PIN_A4)) break;  //Channel 1 from encoder of Right motor (RA4) 
.................... 		for (n=0; n<255;n++) if (input(PIN_A4)) break;   //Channel 1 from encoder of Right motor (RA4) 
.................... 		if (input(PIN_B2)){                              //Channel 2 from encoder of Right motor (RB2) 
.................... 			DirRightFwd=0; 
.................... 			PVRight=-PVRight;} 
.................... 		else	DirRightFwd=1; 
.................... */ 
.................... 		for (n=0; n<255;n++) if (!input(PIN_C0)) break;  //Channel 2 from encoder of Left motor (RC0) 
02DD:  CLRF   44
02DE:  INCFSZ 44,W
02DF:  GOTO   2E1
02E0:  GOTO   2EA
02E1:  BSF    45.0
02E2:  MOVF   45,W
02E3:  BSF    03.5
02E4:  MOVWF  07
02E5:  BCF    03.5
02E6:  BTFSS  07.0
02E7:  GOTO   2EA
02E8:  INCF   44,F
02E9:  GOTO   2DE
.................... 		for (n=0; n<255;n++) if (input(PIN_C0)) break;   //Channel 2 from encoder of Left motor (RC0) 
02EA:  CLRF   44
02EB:  INCFSZ 44,W
02EC:  GOTO   2EE
02ED:  GOTO   2F7
02EE:  BSF    45.0
02EF:  MOVF   45,W
02F0:  BSF    03.5
02F1:  MOVWF  07
02F2:  BCF    03.5
02F3:  BTFSC  07.0
02F4:  GOTO   2F7
02F5:  INCF   44,F
02F6:  GOTO   2EB
.................... 		if (input(PIN_B3)){                              //Channel 1 from encoder of Left motor (RB3) 
02F7:  BSF    03.5
02F8:  BSF    06.3
02F9:  BCF    03.5
02FA:  BTFSS  06.3
02FB:  GOTO   303
.................... 			DirLeftFwd=0; 
02FC:  BCF    43.1
.................... 			PVLeft=-PVLeft;} 
02FD:  COMF   2A,F
02FE:  COMF   2B,F
02FF:  INCF   2A,F
0300:  BTFSC  03.2
0301:  INCF   2B,F
.................... 		else	DirLeftFwd=1; 
0302:  GOTO   304
0303:  BSF    43.1
....................  
.................... 		//Right Motor Feedback Speed Control 
.................... 		LastErrRight=ErrRight; 
0304:  MOVF   33,W
0305:  MOVWF  37
0306:  MOVF   32,W
0307:  MOVWF  36
.................... 		ErrRight=SetPoint-PVRight; 
0308:  MOVF   28,W
0309:  SUBWF  20,W
030A:  MOVWF  32
030B:  MOVF   21,W
030C:  MOVWF  33
030D:  MOVF   29,W
030E:  BTFSS  03.0
030F:  INCFSZ 29,W
0310:  SUBWF  33,F
.................... 		CVRight=CVRight + Kpro*ErrRight;					   //Proportional part 
0311:  MOVF   2D,W
0312:  MOVWF  49
0313:  MOVF   2C,W
0314:  MOVWF  48
0315:  MOVF   33,W
0316:  MOVWF  4B
0317:  MOVF   32,W
0318:  MOVWF  4A
0319:  CALL   04A
031A:  MOVF   78,W
031B:  ADDWF  22,F
031C:  BTFSC  03.0
031D:  INCF   23,F
031E:  MOVF   79,W
031F:  ADDWF  23,F
.................... 		CVRight=CVRight + Kdif*(ErrRight-LastErrRight);	//Derivative part 
0320:  MOVF   36,W
0321:  SUBWF  32,W
0322:  MOVWF  77
0323:  MOVF   33,W
0324:  MOVWF  7A
0325:  MOVF   37,W
0326:  BTFSS  03.0
0327:  INCFSZ 37,W
0328:  SUBWF  7A,F
0329:  MOVF   77,W
032A:  MOVWF  46
032B:  MOVF   7A,W
032C:  MOVWF  47
032D:  MOVF   31,W
032E:  MOVWF  49
032F:  MOVF   30,W
0330:  MOVWF  48
0331:  MOVF   7A,W
0332:  MOVWF  4B
0333:  MOVF   77,W
0334:  MOVWF  4A
0335:  CALL   04A
0336:  MOVF   78,W
0337:  ADDWF  22,F
0338:  BTFSC  03.0
0339:  INCF   23,F
033A:  MOVF   79,W
033B:  ADDWF  23,F
....................  
.................... 		//Left Motor Feedback Speed Control 
.................... 		LastErrLeft=ErrLeft; 
033C:  MOVF   35,W
033D:  MOVWF  39
033E:  MOVF   34,W
033F:  MOVWF  38
.................... 		ErrLeft=SetPoint-PVLeft; 
0340:  MOVF   2A,W
0341:  SUBWF  20,W
0342:  MOVWF  34
0343:  MOVF   21,W
0344:  MOVWF  35
0345:  MOVF   2B,W
0346:  BTFSS  03.0
0347:  INCFSZ 2B,W
0348:  SUBWF  35,F
.................... 		CVLeft=CVLeft + Kpro*ErrLeft;						   //Proportional part 
0349:  MOVF   2D,W
034A:  MOVWF  49
034B:  MOVF   2C,W
034C:  MOVWF  48
034D:  MOVF   35,W
034E:  MOVWF  4B
034F:  MOVF   34,W
0350:  MOVWF  4A
0351:  CALL   04A
0352:  MOVF   78,W
0353:  ADDWF  24,F
0354:  BTFSC  03.0
0355:  INCF   25,F
0356:  MOVF   79,W
0357:  ADDWF  25,F
.................... 		CVLeft=CVLeft + Kdif*(ErrLeft-LastErrLeft);		//Derivative part 
0358:  MOVF   38,W
0359:  SUBWF  34,W
035A:  MOVWF  77
035B:  MOVF   35,W
035C:  MOVWF  7A
035D:  MOVF   39,W
035E:  BTFSS  03.0
035F:  INCFSZ 39,W
0360:  SUBWF  7A,F
0361:  MOVF   77,W
0362:  MOVWF  46
0363:  MOVF   7A,W
0364:  MOVWF  47
0365:  MOVF   31,W
0366:  MOVWF  49
0367:  MOVF   30,W
0368:  MOVWF  48
0369:  MOVF   7A,W
036A:  MOVWF  4B
036B:  MOVF   77,W
036C:  MOVWF  4A
036D:  CALL   04A
036E:  MOVF   78,W
036F:  ADDWF  24,F
0370:  BTFSC  03.0
0371:  INCF   25,F
0372:  MOVF   79,W
0373:  ADDWF  25,F
....................  
.................... 		//Integral Part 
.................... 		if (SetPoint>=0) 	  ISum=ISum + (PVRight-PVLeft) + Bias; 
0374:  BTFSC  21.7
0375:  GOTO   392
0376:  MOVF   2A,W
0377:  SUBWF  28,W
0378:  MOVWF  77
0379:  MOVF   29,W
037A:  MOVWF  7A
037B:  MOVF   2B,W
037C:  BTFSS  03.0
037D:  INCFSZ 2B,W
037E:  SUBWF  7A,F
037F:  MOVF   77,W
0380:  ADDWF  3A,W
0381:  MOVWF  46
0382:  MOVF   3B,W
0383:  MOVWF  47
0384:  BTFSC  03.0
0385:  INCF   47,F
0386:  MOVF   7A,W
0387:  ADDWF  47,F
0388:  MOVF   3C,W
0389:  ADDWF  46,W
038A:  MOVWF  3A
038B:  MOVF   47,W
038C:  MOVWF  3B
038D:  BTFSC  03.0
038E:  INCF   3B,F
038F:  MOVF   3D,W
0390:  ADDWF  3B,F
.................... 		else				     ISum=ISum + (PVRight-PVLeft) - Bias; 
0391:  GOTO   3AD
0392:  MOVF   2A,W
0393:  SUBWF  28,W
0394:  MOVWF  77
0395:  MOVF   29,W
0396:  MOVWF  7A
0397:  MOVF   2B,W
0398:  BTFSS  03.0
0399:  INCFSZ 2B,W
039A:  SUBWF  7A,F
039B:  MOVF   77,W
039C:  ADDWF  3A,W
039D:  MOVWF  46
039E:  MOVF   3B,W
039F:  MOVWF  47
03A0:  BTFSC  03.0
03A1:  INCF   47,F
03A2:  MOVF   7A,W
03A3:  ADDWF  47,F
03A4:  MOVF   3C,W
03A5:  SUBWF  46,W
03A6:  MOVWF  3A
03A7:  MOVF   47,W
03A8:  MOVWF  3B
03A9:  MOVF   3D,W
03AA:  BTFSS  03.0
03AB:  INCFSZ 3D,W
03AC:  SUBWF  3B,F
.................... 		CVRight=CVRight - Kint*ISum; 
03AD:  MOVF   2F,W
03AE:  MOVWF  49
03AF:  MOVF   2E,W
03B0:  MOVWF  48
03B1:  MOVF   3B,W
03B2:  MOVWF  4B
03B3:  MOVF   3A,W
03B4:  MOVWF  4A
03B5:  CALL   04A
03B6:  MOVF   78,W
03B7:  SUBWF  22,F
03B8:  MOVF   79,W
03B9:  BTFSS  03.0
03BA:  INCFSZ 79,W
03BB:  SUBWF  23,F
.................... 		CVLeft=CVLeft + Kint*ISum; 
03BC:  MOVF   2F,W
03BD:  MOVWF  49
03BE:  MOVF   2E,W
03BF:  MOVWF  48
03C0:  MOVF   3B,W
03C1:  MOVWF  4B
03C2:  MOVF   3A,W
03C3:  MOVWF  4A
03C4:  CALL   04A
03C5:  MOVF   78,W
03C6:  ADDWF  24,F
03C7:  BTFSC  03.0
03C8:  INCF   25,F
03C9:  MOVF   79,W
03CA:  ADDWF  25,F
....................  
.................... 		//Limits control. Due to the PWM frecuency (10Khz), the maximum resolution 
.................... 		//allowed for the counter register by the micro is 8 bits (0-255). As we are 
.................... 		//working with units/UnitDiv, the limit then for CVRight & CVLeft are -255*UnitDiv...+255*UnitDiv 
.................... 		if (CVRight>(255*UnitDiv)) CVRight=255*UnitDiv; 
03CB:  CLRF   49
03CC:  MOVLW  FF
03CD:  MOVWF  48
03CE:  MOVF   3F,W
03CF:  MOVWF  4B
03D0:  MOVF   3E,W
03D1:  MOVWF  4A
03D2:  CALL   04A
03D3:  MOVF   79,W
03D4:  MOVWF  7A
03D5:  MOVF   78,W
03D6:  BTFSS  79.7
03D7:  GOTO   3DB
03D8:  BTFSS  23.7
03D9:  GOTO   3E7
03DA:  GOTO   3DD
03DB:  BTFSC  23.7
03DC:  GOTO   3F3
03DD:  MOVF   7A,W
03DE:  SUBWF  23,W
03DF:  BTFSS  03.0
03E0:  GOTO   3F3
03E1:  BTFSS  03.2
03E2:  GOTO   3E7
03E3:  MOVF   22,W
03E4:  SUBWF  78,W
03E5:  BTFSC  03.0
03E6:  GOTO   3F3
03E7:  CLRF   49
03E8:  MOVLW  FF
03E9:  MOVWF  48
03EA:  MOVF   3F,W
03EB:  MOVWF  4B
03EC:  MOVF   3E,W
03ED:  MOVWF  4A
03EE:  CALL   04A
03EF:  MOVF   79,W
03F0:  MOVWF  23
03F1:  MOVF   78,W
03F2:  MOVWF  22
.................... 		if (CVRight<-(255*UnitDiv)) CVRight=-UnitDiv*255; 
03F3:  CLRF   49
03F4:  MOVLW  FF
03F5:  MOVWF  48
03F6:  MOVF   3F,W
03F7:  MOVWF  4B
03F8:  MOVF   3E,W
03F9:  MOVWF  4A
03FA:  CALL   04A
03FB:  MOVF   79,W
03FC:  MOVWF  7A
03FD:  MOVF   78,W
03FE:  SUBLW  00
03FF:  MOVWF  77
0400:  MOVF   79,W
0401:  BTFSS  03.0
0402:  INCFSZ 79,W
0403:  GOTO   406
0404:  MOVLW  00
0405:  GOTO   407
0406:  SUBLW  00
0407:  MOVWF  7A
0408:  MOVF   77,W
0409:  MOVWF  78
040A:  BTFSS  23.7
040B:  GOTO   40F
040C:  BTFSS  7A.7
040D:  GOTO   41B
040E:  GOTO   411
040F:  BTFSC  7A.7
0410:  GOTO   42E
0411:  MOVF   23,W
0412:  SUBWF  7A,W
0413:  BTFSS  03.0
0414:  GOTO   42E
0415:  BTFSS  03.2
0416:  GOTO   41B
0417:  MOVF   78,W
0418:  SUBWF  22,W
0419:  BTFSC  03.0
041A:  GOTO   42E
041B:  COMF   3E,W
041C:  MOVWF  46
041D:  COMF   3F,W
041E:  MOVWF  47
041F:  INCF   46,F
0420:  BTFSC  03.2
0421:  INCF   47,F
0422:  MOVF   47,W
0423:  MOVWF  49
0424:  MOVF   46,W
0425:  MOVWF  48
0426:  CLRF   4B
0427:  MOVLW  FF
0428:  MOVWF  4A
0429:  CALL   04A
042A:  MOVF   79,W
042B:  MOVWF  23
042C:  MOVF   78,W
042D:  MOVWF  22
.................... 		if (CVLeft>(255*UnitDiv)) CVLeft=255*UnitDiv; 
042E:  CLRF   49
042F:  MOVLW  FF
0430:  MOVWF  48
0431:  MOVF   3F,W
0432:  MOVWF  4B
0433:  MOVF   3E,W
0434:  MOVWF  4A
0435:  CALL   04A
0436:  MOVF   79,W
0437:  MOVWF  7A
0438:  MOVF   78,W
0439:  BTFSS  79.7
043A:  GOTO   43E
043B:  BTFSS  25.7
043C:  GOTO   44A
043D:  GOTO   440
043E:  BTFSC  25.7
043F:  GOTO   456
0440:  MOVF   7A,W
0441:  SUBWF  25,W
0442:  BTFSS  03.0
0443:  GOTO   456
0444:  BTFSS  03.2
0445:  GOTO   44A
0446:  MOVF   24,W
0447:  SUBWF  78,W
0448:  BTFSC  03.0
0449:  GOTO   456
044A:  CLRF   49
044B:  MOVLW  FF
044C:  MOVWF  48
044D:  MOVF   3F,W
044E:  MOVWF  4B
044F:  MOVF   3E,W
0450:  MOVWF  4A
0451:  CALL   04A
0452:  MOVF   79,W
0453:  MOVWF  25
0454:  MOVF   78,W
0455:  MOVWF  24
.................... 		if (CVLeft<-(255*UnitDiv)) CVLeft=-UnitDiv*255; 
0456:  CLRF   49
0457:  MOVLW  FF
0458:  MOVWF  48
0459:  MOVF   3F,W
045A:  MOVWF  4B
045B:  MOVF   3E,W
045C:  MOVWF  4A
045D:  CALL   04A
045E:  MOVF   79,W
045F:  MOVWF  7A
0460:  MOVF   78,W
0461:  SUBLW  00
0462:  MOVWF  77
0463:  MOVF   79,W
0464:  BTFSS  03.0
0465:  INCFSZ 79,W
0466:  GOTO   469
0467:  MOVLW  00
0468:  GOTO   46A
0469:  SUBLW  00
046A:  MOVWF  7A
046B:  MOVF   77,W
046C:  MOVWF  78
046D:  BTFSS  25.7
046E:  GOTO   472
046F:  BTFSS  7A.7
0470:  GOTO   47E
0471:  GOTO   474
0472:  BTFSC  7A.7
0473:  GOTO   491
0474:  MOVF   25,W
0475:  SUBWF  7A,W
0476:  BTFSS  03.0
0477:  GOTO   491
0478:  BTFSS  03.2
0479:  GOTO   47E
047A:  MOVF   78,W
047B:  SUBWF  24,W
047C:  BTFSC  03.0
047D:  GOTO   491
047E:  COMF   3E,W
047F:  MOVWF  46
0480:  COMF   3F,W
0481:  MOVWF  47
0482:  INCF   46,F
0483:  BTFSC  03.2
0484:  INCF   47,F
0485:  MOVF   47,W
0486:  MOVWF  49
0487:  MOVF   46,W
0488:  MOVWF  48
0489:  CLRF   4B
048A:  MOVLW  FF
048B:  MOVWF  4A
048C:  CALL   04A
048D:  MOVF   79,W
048E:  MOVWF  25
048F:  MOVF   78,W
0490:  MOVWF  24
....................  
....................       //Set new PWM values for motor 
.................... //		SetPWM(CVRight, CVLeft); 
.................... SetPWM(10000, 20000); 
0491:  MOVLW  27
0492:  MOVWF  47
0493:  MOVLW  10
0494:  MOVWF  46
0495:  MOVLW  4E
0496:  MOVWF  49
0497:  MOVLW  20
0498:  MOVWF  48
0499:  GOTO   09E
....................       //Sends through serial port the feedback values 
.................... 		if (SendFeedback) 
049A:  BTFSS  43.2
049B:  GOTO   58A
.................... 		{ 
.................... 			if (SetPoint >= 0) 	{printf("%Ld",SetPoint);} 
049C:  BTFSC  21.7
049D:  GOTO   4A6
049E:  MOVLW  10
049F:  MOVWF  04
04A0:  MOVF   21,W
04A1:  MOVWF  49
04A2:  MOVF   20,W
04A3:  MOVWF  48
04A4:  CALL   0E9
.................... 			else 				      {printf("-%Ld",-SetPoint);} 
04A5:  GOTO   4B8
04A6:  COMF   20,W
04A7:  MOVWF  46
04A8:  COMF   21,W
04A9:  MOVWF  47
04AA:  INCF   46,F
04AB:  BTFSC  03.2
04AC:  INCF   47,F
04AD:  MOVLW  2D
04AE:  BTFSS  0C.4
04AF:  GOTO   4AE
04B0:  MOVWF  19
04B1:  MOVLW  10
04B2:  MOVWF  04
04B3:  MOVF   47,W
04B4:  MOVWF  49
04B5:  MOVF   46,W
04B6:  MOVWF  48
04B7:  CALL   0E9
.................... 			putc(9); 
04B8:  MOVLW  09
04B9:  BTFSS  0C.4
04BA:  GOTO   4B9
04BB:  MOVWF  19
.................... 			if (PVLeft >= 0) 	   {printf("%Ld",PVLeft);} 
04BC:  BTFSC  2B.7
04BD:  GOTO   4C6
04BE:  MOVLW  10
04BF:  MOVWF  04
04C0:  MOVF   2B,W
04C1:  MOVWF  49
04C2:  MOVF   2A,W
04C3:  MOVWF  48
04C4:  CALL   0E9
.................... 			else 				      {printf("-%Ld",-PVLeft);} 
04C5:  GOTO   4D8
04C6:  COMF   2A,W
04C7:  MOVWF  46
04C8:  COMF   2B,W
04C9:  MOVWF  47
04CA:  INCF   46,F
04CB:  BTFSC  03.2
04CC:  INCF   47,F
04CD:  MOVLW  2D
04CE:  BTFSS  0C.4
04CF:  GOTO   4CE
04D0:  MOVWF  19
04D1:  MOVLW  10
04D2:  MOVWF  04
04D3:  MOVF   47,W
04D4:  MOVWF  49
04D5:  MOVF   46,W
04D6:  MOVWF  48
04D7:  CALL   0E9
.................... 			putc(9); 
04D8:  MOVLW  09
04D9:  BTFSS  0C.4
04DA:  GOTO   4D9
04DB:  MOVWF  19
.................... 			if (PVRight >= 0) 	{printf("%Ld",PVRight);} 
04DC:  BTFSC  29.7
04DD:  GOTO   4E6
04DE:  MOVLW  10
04DF:  MOVWF  04
04E0:  MOVF   29,W
04E1:  MOVWF  49
04E2:  MOVF   28,W
04E3:  MOVWF  48
04E4:  CALL   0E9
.................... 			else 				      {printf("-%Ld",-PVRight);} 
04E5:  GOTO   4F8
04E6:  COMF   28,W
04E7:  MOVWF  46
04E8:  COMF   29,W
04E9:  MOVWF  47
04EA:  INCF   46,F
04EB:  BTFSC  03.2
04EC:  INCF   47,F
04ED:  MOVLW  2D
04EE:  BTFSS  0C.4
04EF:  GOTO   4EE
04F0:  MOVWF  19
04F1:  MOVLW  10
04F2:  MOVWF  04
04F3:  MOVF   47,W
04F4:  MOVWF  49
04F5:  MOVF   46,W
04F6:  MOVWF  48
04F7:  CALL   0E9
.................... 			putc(9); 
04F8:  MOVLW  09
04F9:  BTFSS  0C.4
04FA:  GOTO   4F9
04FB:  MOVWF  19
.................... 			if (Kpro >= 0) 	   {printf("%Ld",Kpro);} 
04FC:  BTFSC  2D.7
04FD:  GOTO   506
04FE:  MOVLW  10
04FF:  MOVWF  04
0500:  MOVF   2D,W
0501:  MOVWF  49
0502:  MOVF   2C,W
0503:  MOVWF  48
0504:  CALL   0E9
.................... 			else 				      {printf("-%Ld",-Kpro);} 
0505:  GOTO   518
0506:  COMF   2C,W
0507:  MOVWF  46
0508:  COMF   2D,W
0509:  MOVWF  47
050A:  INCF   46,F
050B:  BTFSC  03.2
050C:  INCF   47,F
050D:  MOVLW  2D
050E:  BTFSS  0C.4
050F:  GOTO   50E
0510:  MOVWF  19
0511:  MOVLW  10
0512:  MOVWF  04
0513:  MOVF   47,W
0514:  MOVWF  49
0515:  MOVF   46,W
0516:  MOVWF  48
0517:  CALL   0E9
.................... 			putc(9); 
0518:  MOVLW  09
0519:  BTFSS  0C.4
051A:  GOTO   519
051B:  MOVWF  19
.................... 			if (Kdif >= 0) 	   {printf("%Ld",Kdif);} 
051C:  BTFSC  31.7
051D:  GOTO   526
051E:  MOVLW  10
051F:  MOVWF  04
0520:  MOVF   31,W
0521:  MOVWF  49
0522:  MOVF   30,W
0523:  MOVWF  48
0524:  CALL   0E9
.................... 			else 				      {printf("-%Ld",-Kdif);} 
0525:  GOTO   538
0526:  COMF   30,W
0527:  MOVWF  46
0528:  COMF   31,W
0529:  MOVWF  47
052A:  INCF   46,F
052B:  BTFSC  03.2
052C:  INCF   47,F
052D:  MOVLW  2D
052E:  BTFSS  0C.4
052F:  GOTO   52E
0530:  MOVWF  19
0531:  MOVLW  10
0532:  MOVWF  04
0533:  MOVF   47,W
0534:  MOVWF  49
0535:  MOVF   46,W
0536:  MOVWF  48
0537:  CALL   0E9
.................... 			putc(9); 
0538:  MOVLW  09
0539:  BTFSS  0C.4
053A:  GOTO   539
053B:  MOVWF  19
.................... 			if (Kint >= 0) 	   {printf("%Ld",Kint);} 
053C:  BTFSC  2F.7
053D:  GOTO   546
053E:  MOVLW  10
053F:  MOVWF  04
0540:  MOVF   2F,W
0541:  MOVWF  49
0542:  MOVF   2E,W
0543:  MOVWF  48
0544:  CALL   0E9
.................... 			else 				      {printf("-%Ld",-Kint);} 
0545:  GOTO   558
0546:  COMF   2E,W
0547:  MOVWF  46
0548:  COMF   2F,W
0549:  MOVWF  47
054A:  INCF   46,F
054B:  BTFSC  03.2
054C:  INCF   47,F
054D:  MOVLW  2D
054E:  BTFSS  0C.4
054F:  GOTO   54E
0550:  MOVWF  19
0551:  MOVLW  10
0552:  MOVWF  04
0553:  MOVF   47,W
0554:  MOVWF  49
0555:  MOVF   46,W
0556:  MOVWF  48
0557:  CALL   0E9
.................... 			putc(9); 
0558:  MOVLW  09
0559:  BTFSS  0C.4
055A:  GOTO   559
055B:  MOVWF  19
.................... 			if (Bias >= 0) 	   {printf("%Ld",Bias);} 
055C:  BTFSC  3D.7
055D:  GOTO   566
055E:  MOVLW  10
055F:  MOVWF  04
0560:  MOVF   3D,W
0561:  MOVWF  49
0562:  MOVF   3C,W
0563:  MOVWF  48
0564:  CALL   0E9
.................... 			else 				      {printf("-%Ld",-Bias);} 
0565:  GOTO   578
0566:  COMF   3C,W
0567:  MOVWF  46
0568:  COMF   3D,W
0569:  MOVWF  47
056A:  INCF   46,F
056B:  BTFSC  03.2
056C:  INCF   47,F
056D:  MOVLW  2D
056E:  BTFSS  0C.4
056F:  GOTO   56E
0570:  MOVWF  19
0571:  MOVLW  10
0572:  MOVWF  04
0573:  MOVF   47,W
0574:  MOVWF  49
0575:  MOVF   46,W
0576:  MOVWF  48
0577:  CALL   0E9
.................... 			putc(9); 
0578:  MOVLW  09
0579:  BTFSS  0C.4
057A:  GOTO   579
057B:  MOVWF  19
.................... 			if (Kpause >= 0) 	   {printf("%d",Kpause);} 
057C:  MOVF   42,W
057D:  MOVWF  46
057E:  MOVLW  1F
057F:  MOVWF  47
0580:  GOTO   16F
.................... 			else 				      {printf("-%d",-Kpause);} 
.................... 			putc(13); 
0581:  MOVLW  0D
0582:  BTFSS  0C.4
0583:  GOTO   582
0584:  MOVWF  19
.................... 			putc(10); 
0585:  MOVLW  0A
0586:  BTFSS  0C.4
0587:  GOTO   586
0588:  MOVWF  19
.................... 		} 
.................... 		else delay_ms(20); //So in case info is transmitted or not, the time taken is the same. 
0589:  GOTO   58D
058A:  MOVLW  14
058B:  MOVWF  46
058C:  CALL   035
....................  
....................  
....................       //Check for commands from Serial Port 
....................       if(kbhit()) { 
058D:  BTFSS  0C.5
058E:  GOTO   5FC
....................          Command=getc(); 
058F:  BTFSS  0C.5
0590:  GOTO   58F
0591:  MOVF   1A,W
0592:  MOVWF  40
.................... 		   switch (Command) { 
0593:  MOVF   40,W
0594:  XORLW  20
0595:  BTFSC  03.2
0596:  GOTO   5AD
0597:  XORLW  01
0598:  BTFSC  03.2
0599:  GOTO   5BE
059A:  XORLW  03
059B:  BTFSC  03.2
059C:  GOTO   5CF
059D:  XORLW  01
059E:  BTFSC  03.2
059F:  GOTO   5DA
05A0:  XORLW  07
05A1:  BTFSC  03.2
05A2:  GOTO   5E5
05A3:  XORLW  01
05A4:  BTFSC  03.2
05A5:  GOTO   5F0
05A6:  XORLW  03
05A7:  BTFSC  03.2
05A8:  GOTO   5F8
05A9:  XORLW  01
05AA:  BTFSC  03.2
05AB:  GOTO   5FA
05AC:  GOTO   5FC
.................... 			   case 32:	//Set Speed (" ") 
.................... 				  Value=getc(); 
05AD:  BTFSS  0C.5
05AE:  GOTO   5AD
05AF:  MOVF   1A,W
05B0:  MOVWF  41
.................... 				  SetPoint=((int)Value-50)*10; 
05B1:  MOVLW  32
05B2:  SUBWF  41,W
05B3:  MOVWF  47
05B4:  MOVWF  48
05B5:  MOVLW  0A
05B6:  MOVWF  49
05B7:  CALL   1DA
05B8:  MOVF   78,W
05B9:  CLRF   7A
05BA:  MOVWF  20
05BB:  MOVF   7A,W
05BC:  MOVWF  21
.................... 				  break; 
05BD:  GOTO   5FC
.................... 			   case 33:	//Set Bias ("!") 
.................... 				  Value=getc(); 
05BE:  BTFSS  0C.5
05BF:  GOTO   5BE
05C0:  MOVF   1A,W
05C1:  MOVWF  41
.................... 				  Bias=((int)Value-50)*10; 
05C2:  MOVLW  32
05C3:  SUBWF  41,W
05C4:  MOVWF  47
05C5:  MOVWF  48
05C6:  MOVLW  0A
05C7:  MOVWF  49
05C8:  CALL   1DA
05C9:  MOVF   78,W
05CA:  CLRF   7A
05CB:  MOVWF  3C
05CC:  MOVF   7A,W
05CD:  MOVWF  3D
.................... 				  break; 
05CE:  GOTO   5FC
.................... 			   case 34:	//Set Kpro (""") 
.................... 				  Value=getc(); 
05CF:  BTFSS  0C.5
05D0:  GOTO   5CF
05D1:  MOVF   1A,W
05D2:  MOVWF  41
.................... 				  Kpro=((int)Value-50); 
05D3:  MOVLW  32
05D4:  SUBWF  41,W
05D5:  CLRF   7A
05D6:  MOVWF  2C
05D7:  MOVF   7A,W
05D8:  MOVWF  2D
.................... 				  break; 
05D9:  GOTO   5FC
.................... 			   case 35:	//Set Kint ("#") 
.................... 				  Value=getc(); 
05DA:  BTFSS  0C.5
05DB:  GOTO   5DA
05DC:  MOVF   1A,W
05DD:  MOVWF  41
.................... 				  Kint=((int)Value-50); 
05DE:  MOVLW  32
05DF:  SUBWF  41,W
05E0:  CLRF   7A
05E1:  MOVWF  2E
05E2:  MOVF   7A,W
05E3:  MOVWF  2F
.................... 				  break; 
05E4:  GOTO   5FC
.................... 			   case 36:	//Set Kdif ("$") 
.................... 				  Value=getc(); 
05E5:  BTFSS  0C.5
05E6:  GOTO   5E5
05E7:  MOVF   1A,W
05E8:  MOVWF  41
.................... 				  Kdif=((int)Value-50); 
05E9:  MOVLW  32
05EA:  SUBWF  41,W
05EB:  CLRF   7A
05EC:  MOVWF  30
05ED:  MOVF   7A,W
05EE:  MOVWF  31
.................... 				  break; 
05EF:  GOTO   5FC
.................... 			   case 37:	//Set Kpause ("%") 
.................... 				  Value=getc(); 
05F0:  BTFSS  0C.5
05F1:  GOTO   5F0
05F2:  MOVF   1A,W
05F3:  MOVWF  41
.................... 				  Kpause=((int)Value-50); 
05F4:  MOVLW  32
05F5:  SUBWF  41,W
05F6:  MOVWF  42
.................... 				  if (Kpause<0) Kpause=0; 
.................... 				  break; 
05F7:  GOTO   5FC
.................... 			   case 38:	//Ask for feedback values to be sent via serial port ("&") 
.................... 				  SendFeedback=1; 
05F8:  BSF    43.2
.................... 				  break; 
05F9:  GOTO   5FC
.................... 			   case 39:	//Ask to stop sending feedback values ("'") 
.................... 				  SendFeedback=0; 
05FA:  BCF    43.2
.................... 				  break; 
05FB:  GOTO   5FC
.................... 			   default: 
.................... 				  ; 
.................... 		    } 
....................       } 
....................    } 
05FC:  GOTO   29E
....................  
....................  
.................... } 
05FD:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
